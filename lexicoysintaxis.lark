start: program

program: modulos main

modulos: modulos1
modulos1: funcion modulos |

funcion: "func" tipo1 ":" ID "(" func_vars? ")" bloque_ret | 

func_vars: tipo ":" ID func_vars1 
func_vars1: "," func_vars |

main: "main" main_start bloque_ret
main_start: 

bloque_ret: "{" vars estatuto1 RET expresion ";" "}"
bloque: "{" estatuto1 "}"
estatuto1: estatuto2 |
estatuto2: estatuto estatuto1

estatuto: while | condicion | llamada | asignacion

llamada: ID "(" parametros ")" ";"

parametros: expresion parametros2
parametros2: "," parametros | 

asignacion: ID "=" push_asg expresion assign_val ";"

expresion: not expresion1
not: "!" |

expresion1: expresion2 evaluacion4 expresion4
expresion4: simbolo3 expresion1 |
simbolo3: "&&" -> push_and | "||" -> push_or
evaluacion4:

expresion2: exp evaluacion3 expresion3
expresion3: simbolo expresion2 |
simbolo: "<" -> push_gt | ">" -> push_lt | "!=" -> push_ne | "<=" -> push_get | ">=" -> push_let | "==" -> push_eq
evaluacion3:

exp: termino evaluacion2 exp1 
exp1: simbolo1 exp |
simbolo1: "+" -> push_sum | "-" -> push_res
evaluacion2:

termino: factor evaluacion1 termino1
termino1: simbolo2 termino |
simbolo2: "*" -> push_mul | "/" -> push_div
evaluacion1: 

factor: "(" push_par expresion ")" pop_par | var_cte
push_par:
pop_par:

condicion: "if" "(" expresion ")" check_if bloque condicion1 end_if
condicion1: push_else "else" bloque | 
check_if:
end_if:
push_else:

while: "while" push_while "(" expresion ")" check_while bloque end_while
push_while:
check_while:
end_while:

vars: vars1?
vars1: tipo ":" ID vars2? ";" vars
vars2: asg_sign push_asg expresion assign_val
asg_sign: "="
push_asg:
assign_val:

var_cte: SIGNED_FLOAT -> flo
| SIGNED_INT -> integ
| llamada -> call
| TRUE  -> true
| FALSE  -> false
| ID -> id
| ESCAPED_STRING -> string

tipo: tipo1 tipo2
tipo1: INT | FLOAT | STRING | BOOL
tipo2: "[" NUMBER "]" |

ID: /[a-zA-Z_][a-zA-Z0-9_]*/
INT: "int"
FLOAT: "float"
STRING: "string"
BOOL : "bool"
TRUE: "true"
FALSE: "false"
RET: "ret"
VOID: "void"


%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS
%ignore WS