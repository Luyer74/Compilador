start: program

program: modulos main

modulos: modulos1
modulos1: funcion modulos |

funcion: "func" tipo1 ":" ID "(" func_vars? ")" bloque_ret | 

func_vars: tipo ":" ID func_vars1 
func_vars1: "," func_vars |

main: "main" main_start bloque_ret
main_start: 

bloque_ret: "{" vars estatuto1 RET expresion ";" "}"
bloque: "{" estatuto1 "}"
estatuto1: estatuto2 |
estatuto2: estatuto estatuto1

estatuto: while | condicion | estatuto4
estatuto4: estatuto5 ";"
estatuto5: llamada | asignacion

llamada: ID "(" parametros ")"

parametros: expresion parametros2
parametros2: "," parametros | 

asignacion: ID "=" expresion

expresion: not expresion1
not: "!" |

expresion1: expresion2 expresion4
expresion4: simbolo3 expresion1 |
simbolo3: "&&" | "||"

expresion2: exp expresion3
expresion3: simbolo expresion2 |
simbolo: "<" | ">" | "!=" | "<=" | ">=" | "=="

exp: termino evaluacion2 exp1 
exp1: simbolo1 exp |
simbolo1: "+" -> push_sum | "-" -> push_res
evaluacion2:

termino: factor evaluacion1 termino1
termino1: simbolo2 termino |
simbolo2: "*" -> push_mul | "/" -> push_div
evaluacion1: 

factor: "(" expresion ")" | var_cte

condicion: "if" "(" expresion ")" bloque condicion1
condicion1: "else" bloque | 

while: "while" "(" expresion ")" bloque

vars: vars1?
vars1: tipo ":" ID vars2? ";" vars
vars2: "=" expresion

var_cte: ID -> id
| SIGNED_FLOAT -> flo
| SIGNED_INT -> integ
| llamada -> call
| TRUE  -> true
| FALSE  -> false
| ESCAPED_STRING -> string

tipo: tipo1 tipo2
tipo1: INT | FLOAT | STRING
tipo2: "[" NUMBER "]" |

ID: /[a-zA-Z_][a-zA-Z0-9_]*/
INT: "int"
FLOAT: "float"
STRING: "string"
TRUE: "true"
FALSE: "false"
RET: "ret"
VOID: "void"


%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS
%ignore WS